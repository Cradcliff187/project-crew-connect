
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { DOCUMENTS_BUCKET_ID } from '@/constants/storageConstants';

const SUPABASE_URL = "https://zrxezqllmpdlhiudutme.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpyeGV6cWxsbXBkbGhpdWR1dG1lIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE0ODcyMzIsImV4cCI6MjA1NzA2MzIzMn0.zbmttNoNRALsW1aRV4VjodpitI_3opfNGhDgydcGhmQ";

// Create client with explicit headers to ensure API key is always sent
// But avoid setting Content-Type globally to prevent upload issues
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`
      },
    },
    db: {
      schema: 'public',
    },
    // Initialize storage settings with correct defaults
    storage: {
      // Don't limit the file sizes by default
      maxFileSize: 50 * 1024 * 1024, // 50MB max file size
    },
  }
);

// Create a bucket if it doesn't exist yet
export const ensureStorageBucket = async () => {
  try {
    // First check if we have the bucket already
    const { data: buckets, error } = await supabase.storage.listBuckets();
    
    if (error) {
      console.error('Error listing buckets:', error);
      return false;
    }
    
    // Log available buckets for debugging
    console.log('Available buckets:', buckets?.map(b => b.name));
    
    // Check if we have our documents bucket (case insensitive)
    const documentsBucket = buckets?.find(bucket => 
      bucket.name.toLowerCase() === DOCUMENTS_BUCKET_ID.toLowerCase()
    );
    
    if (!documentsBucket) {
      // Bucket doesn't exist, attempt to create it
      console.log(`Creating ${DOCUMENTS_BUCKET_ID} bucket as it does not exist`);
      const { data, error: createError } = await supabase.storage.createBucket(
        DOCUMENTS_BUCKET_ID,
        {
          public: true,
          fileSizeLimit: 50 * 1024 * 1024, // 50MB
          allowedMimeTypes: ['image/*', 'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
        }
      );
      
      if (createError) {
        console.error('Error creating storage bucket:', createError);
        return false;
      }
      
      console.log(`Successfully created ${DOCUMENTS_BUCKET_ID} bucket`);
      return true;
    }
    
    console.log('Documents bucket found:', documentsBucket.name);
    return true;
  } catch (error) {
    console.error('Error in ensureStorageBucket:', error);
    return false;
  }
};

// Initialize bucket when importing the client
ensureStorageBucket().catch(console.error);
