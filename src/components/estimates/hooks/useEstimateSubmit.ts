
import { useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { EstimateFormValues, EstimateItem } from '../schemas/estimateFormSchema';
import { 
  calculateItemCost, 
  calculateItemMarkup, 
  calculateItemPrice, 
  calculateItemGrossMargin, 
  calculateItemGrossMarginPercentage, 
  calculateSubtotal 
} from '../utils/estimateCalculations';

export const useEstimateSubmit = () => {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const uploadItemDocument = async (file: File, estimateId: string, itemIndex: number): Promise<string | null> => {
    try {
      // Create a unique file path
      const timestamp = new Date().getTime();
      const fileExt = file.name.split('.').pop();
      const fileName = `${timestamp}-item-${itemIndex}.${fileExt}`;
      const filePath = `estimates/${estimateId}/items/${fileName}`;
      
      // Upload file to Supabase Storage
      const { error: uploadError } = await supabase.storage
        .from('construction_documents')
        .upload(filePath, file);
        
      if (uploadError) {
        console.error('Error uploading document:', uploadError);
        return null;
      }
      
      // Get the public URL
      const { data: { publicUrl } } = supabase.storage
        .from('construction_documents')
        .getPublicUrl(filePath);
        
      // Also store document metadata in documents table
      const documentData = {
        file_name: file.name,
        file_type: file.type,
        file_size: file.size,
        storage_path: filePath,
        entity_type: 'ESTIMATE',
        entity_id: estimateId,
        category: 'estimate',
        tags: ['estimate_item', `item_${itemIndex}`]
      };
      
      const { data: documentData, error: documentError } = await supabase
        .from('documents')
        .insert(documentData)
        .select('document_id')
        .single();
        
      if (documentError) {
        console.error('Error storing document metadata:', documentError);
        return null;
      }
      
      return documentData.document_id;
    } catch (error) {
      console.error('Error in document upload:', error);
      return null;
    }
  };

  const submitEstimate = async (data: EstimateFormValues, customers: { id: string; name: string }[], onSuccess: () => void) => {
    try {
      setIsSubmitting(true);
      console.log("Submitting estimate with data:", data);
      
      // Make sure items match the EstimateItem type for calculations
      const typedItems: EstimateItem[] = data.items.map(item => ({
        cost: item.cost,
        markup_percentage: item.markup_percentage,
        quantity: item.quantity,
        item_type: item.item_type
      }));
      
      // Calculate the total amount
      const totalAmount = calculateSubtotal(typedItems);
      
      // Parse contingency percentage as a number (defaults to 0 if empty)
      const contingencyPercentage = parseFloat(data.contingency_percentage || '0');
      
      // Find the customer by ID to get the name
      const customer = customers.find(c => c.id === data.customer);
      const customerName = customer?.name || 'Unknown Client';
      console.log("Customer name for the estimate:", customerName);
      
      // Generate a temporary ID for TypeScript (the actual ID will be generated by the database trigger)
      // This is necessary because the TypeScript type requires estimateid, even though
      // the database will generate it via the set_estimate_id() trigger function
      const tempEstimateId = `EST-${Math.floor(Math.random() * 1000000).toString().padStart(6, '0')}`;
      
      // Prepare the estimate data object with the proper field structure
      const estimateData = {
        estimateid: tempEstimateId, // Include this for TypeScript, the trigger will replace it
        customerid: data.customer,
        customername: customerName,
        "job description": data.description,
        estimateamount: totalAmount,
        contingency_percentage: contingencyPercentage,
        sitelocationaddress: data.location.address || '',
        sitelocationcity: data.location.city || '',
        sitelocationstate: data.location.state || '',
        sitelocationzip: data.location.zip || '',
        datecreated: new Date().toISOString(),
        status: 'draft',
        isactive: true,
        projectname: data.project
      };
      
      console.log("Submitting estimate data to Supabase:", estimateData);
      
      // Insert the estimate into the database
      const { data: insertedData, error: estimateError } = await supabase
        .from('estimates')
        .insert(estimateData)
        .select();

      if (estimateError) {
        console.error("Error inserting estimate:", estimateError);
        throw estimateError;
      }
      
      if (!insertedData || insertedData.length === 0) {
        throw new Error('Failed to create estimate - no ID returned');
      }
      
      console.log("Estimate created:", insertedData);
      const estimateId = insertedData[0].estimateid;

      // Prepare and upload documents first, then insert estimate items
      const estimateItems = await Promise.all(data.items.map(async (item, index) => {
        // Upload document if provided
        let documentId = null;
        if (item.document) {
          documentId = await uploadItemDocument(item.document, estimateId, index);
        }
        
        const typedItem: EstimateItem = {
          cost: item.cost,
          markup_percentage: item.markup_percentage,
          quantity: item.quantity || '1'
        };
        
        // Calculate all the derived values
        const cost = calculateItemCost(typedItem);
        const markupAmount = calculateItemMarkup(typedItem);
        const totalPrice = calculateItemPrice(typedItem);
        const grossMargin = calculateItemGrossMargin(typedItem);
        const grossMarginPercentage = calculateItemGrossMarginPercentage(typedItem);
        
        return {
          estimate_id: estimateId,
          description: item.description,
          quantity: parseFloat(item.quantity || '1'),
          unit_price: totalPrice / (parseFloat(item.quantity || '1') || 1), // Unit price is the price per unit
          total_price: totalPrice,
          item_type: item.item_type,
          cost: cost,
          markup_percentage: parseFloat(item.markup_percentage || '0'),
          vendor_id: item.item_type === 'vendor' ? item.vendor_id : null,
          subcontractor_id: item.item_type === 'subcontractor' ? item.subcontractor_id : null,
          document_id: documentId
        };
      }));

      console.log("Inserting estimate items:", estimateItems);
      const { error: itemsError } = await supabase
        .from('estimate_items')
        .insert(estimateItems);

      if (itemsError) {
        console.error("Error inserting estimate items:", itemsError);
        throw itemsError;
      }

      // Show success message
      toast({
        title: "Success",
        description: `Estimate ${estimateId} has been created.`,
        variant: "default"
      });

      // Call the success callback
      onSuccess();
    } catch (error) {
      console.error('Error creating estimate:', error);
      
      // Provide a more informative error message when possible
      const errorMessage = error instanceof Error 
        ? error.message 
        : "Failed to create estimate. Please try again.";
        
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    submitEstimate
  };
};
