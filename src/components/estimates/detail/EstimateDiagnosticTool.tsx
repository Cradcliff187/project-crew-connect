import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { supabase } from '@/integrations/supabase/client';
import { AlertCircle, Database, ArrowRightLeft } from 'lucide-react';

interface EstimateDiagnosticToolProps {
  estimateId: string;
  onRefresh?: () => void;
}

const EstimateDiagnosticTool: React.FC<EstimateDiagnosticToolProps> = ({
  estimateId,
  onRefresh,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<string[]>([]);

  const runTest = async (testName: string, testFn: () => Promise<any>) => {
    try {
      setResults(prev => [...prev, `Running test: ${testName}...`]);
      setIsLoading(true);
      const result = await testFn();
      setResults(prev => [...prev, `✅ ${testName}: ${JSON.stringify(result)}`]);
      return result;
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      setResults(prev => [...prev, `❌ ${testName} failed: ${errorMessage}`]);
      return null;
    } finally {
      setIsLoading(false);
    }
  };

  const testDatabaseConnection = async () => {
    return await runTest('Database Connection', async () => {
      const { data, error } = await supabase.from('estimates').select('estimateid').limit(1);
      if (error) throw error;
      return `Success! Found ${data.length} estimate(s)`;
    });
  };

  const testEstimateExists = async () => {
    return await runTest('Estimate Exists', async () => {
      const { data, error } = await supabase
        .from('estimates')
        .select('*')
        .eq('estimateid', estimateId)
        .single();
      if (error) throw error;
      return {
        id: data.estimateid,
        status: data.status,
        client: data.customerid || data.customername,
        project: data.projectname,
      };
    });
  };

  const testCreateProject = async () => {
    return await runTest('Create Test Project', async () => {
      // First get the estimate data
      const { data: estimate, error: estimateError } = await supabase
        .from('estimates')
        .select('*')
        .eq('estimateid', estimateId)
        .single();

      if (estimateError) throw estimateError;

      // Get schema for the projects table first
      const { data: schemaData, error: schemaError } = await supabase
        .from('projects')
        .select('*')
        .limit(1);

      if (schemaError) throw schemaError;

      const schemaFields = schemaData && schemaData.length > 0 ? Object.keys(schemaData[0]) : [];
      setResults(prev => [...prev, `Found project schema fields: ${schemaFields.join(', ')}`]);

      // Create a test project with correct fields based on schema
      const projectData: any = {
        // Will be generated by DB but needed for TypeScript
        projectid: undefined,
        customerid: estimate.customerid,
        customername: !estimate.customerid ? estimate.customername : null,
        projectname: `Test Project from ${estimate.estimateid}`,
        // Field names might vary - check both conventions
        jobdescription:
          estimate.job_description ||
          estimate['jobdescription'] ||
          estimate.description ||
          'Test project',
        status: 'active',
        createdon: new Date().toISOString(),
        sitelocationaddress: estimate.sitelocationaddress || '',
        total_budget: estimate.estimateamount || 0,
        budget_status: 'pending',
      };

      // Add any other required fields from schema with default values
      schemaFields.forEach(field => {
        if (!(field in projectData) && field !== 'projectid') {
          projectData[field] = null; // Set null for missing fields
        }
      });

      const { data: newProject, error: projectError } = await supabase
        .from('projects')
        .insert([projectData]) // Wrap in array to satisfy TypeScript
        .select();

      if (projectError) throw projectError;

      return {
        projectId: newProject[0].projectid,
        name: newProject[0].projectname,
      };
    });
  };

  const getEstimateDetails = async (estimateId: string) => {
    return await runTest('Get Estimate Details', async () => {
      // Get full estimate data
      const { data: estimate, error } = await supabase
        .from('estimates')
        .select('*')
        .eq('estimateid', estimateId)
        .single();

      if (error) throw error;

      // Also check if it has a project link
      const hasProject = estimate.projectid ? true : false;

      return {
        id: estimate.estimateid,
        status: estimate.status,
        project_link: estimate.projectid,
        hasProject,
        client: estimate.customerid || estimate.customername,
        projectname: estimate.projectname,
        dates: {
          created: estimate.datecreated,
          sent: estimate.sentdate,
          approved: estimate.approveddate,
        },
        fullData: estimate,
      };
    });
  };

  const runAllTests = async () => {
    setResults([]);
    await testDatabaseConnection();
    const estimate = await testEstimateExists();
    if (estimate) {
      await testCreateProject();
    }
  };

  const clearResults = () => {
    setResults([]);
  };

  if (!isOpen) {
    return (
      <Button variant="outline" size="sm" onClick={() => setIsOpen(true)} className="mt-4 mb-2">
        <Database className="h-4 w-4 mr-2" /> Show Diagnostic Tools
      </Button>
    );
  }

  return (
    <div className="border rounded-lg p-4 mt-4 mb-6 bg-slate-50">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold flex items-center">
          <Database className="h-5 w-5 mr-2" /> Estimate Diagnostic Tools
        </h3>
        <Button variant="ghost" size="sm" onClick={() => setIsOpen(false)}>
          Hide
        </Button>
      </div>

      <div className="flex gap-2 mb-4">
        <Button variant="outline" size="sm" onClick={testDatabaseConnection} disabled={isLoading}>
          Test Database Connection
        </Button>
        <Button variant="outline" size="sm" onClick={testEstimateExists} disabled={isLoading}>
          Check Estimate
        </Button>
        <Button variant="outline" size="sm" onClick={testCreateProject} disabled={isLoading}>
          Create Test Project
        </Button>
        <Button variant="default" size="sm" onClick={runAllTests} disabled={isLoading}>
          Run All Tests
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => getEstimateDetails(estimateId)}
          disabled={isLoading}
        >
          Inspect Estimate
        </Button>
        {results.length > 0 && (
          <Button variant="ghost" size="sm" onClick={clearResults} disabled={isLoading}>
            Clear Results
          </Button>
        )}
      </div>

      {results.length > 0 && (
        <div className="bg-slate-100 p-3 rounded-md text-sm font-mono overflow-auto max-h-60">
          {results.map((result, index) => (
            <div key={index} className={result.includes('❌') ? 'text-red-600' : ''}>
              {result}
            </div>
          ))}
          {isLoading && <div className="text-blue-600">Loading...</div>}
        </div>
      )}

      <div className="mt-4 bg-blue-50 p-3 rounded-md text-sm border border-blue-200 flex items-start">
        <AlertCircle className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0 mt-0.5" />
        <div>
          These tools help diagnose issues with the estimate-to-project conversion. If all tests
          pass but conversion still fails, check the browser console for more detailed errors.
        </div>
      </div>
    </div>
  );
};

export default EstimateDiagnosticTool;
