import { useState } from 'react';
import { toast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { ProjectFormValues as BaseProjectFormValues } from '../schemas/projectFormSchema';
import { BudgetItemFormValues } from '../createWizard/Step2_BudgetLineItems'; // Import budget item type

// Extend the base form values to include budget items
export interface ProjectFormValues extends BaseProjectFormValues {
  budgetItems?: BudgetItemFormValues[];
}

export const useProjectSubmit = (onSuccess: () => void) => {
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async (data: ProjectFormValues) => {
    setIsSubmitting(true);

    try {
      let customerId = data.customerId;

      // If we need to create a new customer first
      if (!customerId && data.newCustomer.customerName) {
        console.log('Creating new customer:', data.newCustomer);

        // We need to use 'as any' to bypass the TypeScript check for customerid
        // since it's auto-generated by a database trigger
        const { data: newCustomer, error: customerError } = await supabase
          .from('customers')
          .insert({
            customername: data.newCustomer.customerName,
            address: data.newCustomer.address,
            city: data.newCustomer.city,
            state: data.newCustomer.state,
            zip: data.newCustomer.zip,
            contactemail: data.newCustomer.email,
            phone: data.newCustomer.phone,
            status: 'active',
            createdon: new Date().toISOString(),
          } as any)
          .select();

        if (customerError) {
          console.error('Error creating customer:', customerError);
          throw customerError;
        }

        if (!newCustomer || newCustomer.length === 0) {
          throw new Error('Failed to create customer - no data returned');
        }

        customerId = newCustomer[0]?.customerid;
        console.log('Created new customer with ID:', customerId);

        if (!customerId) {
          throw new Error('Failed to create customer - no customer ID returned');
        }
      }

      console.log('Creating project with customer ID:', customerId);

      // Validate customer ID format if provided
      if (customerId && typeof customerId === 'string') {
        // If the customer ID doesn't start with CUS-, log a warning
        if (!customerId.startsWith('CUS-')) {
          console.warn('Customer ID may not be in the expected format:', customerId);
        }
      }

      // Now we can create the project
      // We need to use 'as any' to bypass the TypeScript check for projectid
      // since it's auto-generated by a database trigger
      const projectDataToInsert = {
        projectname: data.projectName,
        customerid: customerId || null,
        customername: data.customerId ? undefined : data.newCustomer.customerName || null,
        description: data.jobDescription || '',
        status: data.status,
        start_date: data.start_date || null,
        target_end_date: data.dueDate || null,
        site_address: data.siteLocationSameAsCustomer ? null : data.siteLocation.address,
        site_city: data.siteLocationSameAsCustomer ? null : data.siteLocation.city,
        site_state: data.siteLocationSameAsCustomer ? null : data.siteLocation.state,
        site_zip: data.siteLocationSameAsCustomer ? null : data.siteLocation.zip,
      };

      console.log('Inserting project data:', projectDataToInsert);

      const { data: project, error } = await supabase
        .from('projects')
        .insert(projectDataToInsert as any)
        .select();

      if (error) {
        console.error('Error creating project:', error);
        throw error;
      }

      if (!project || project.length === 0) {
        throw new Error('Failed to create project - no data returned');
      }

      console.log('Project created successfully:', project[0]);
      const newProjectId = project[0]?.projectid;

      if (!newProjectId) {
        throw new Error('Failed to get project ID after creation.');
      }

      // --- Add logic to save budget items ---
      if (data.budgetItems && data.budgetItems.length > 0) {
        console.log(
          `Attempting to save ${data.budgetItems.length} budget items for project ${newProjectId}`
        );
        const itemsToInsert = data.budgetItems.map(item => ({
          project_id: newProjectId,
          category: item.category,
          description: item.description,
          estimated_amount: item.estimated_amount || 0,
          actual_amount: 0, // Default actual to 0
          // Map other fields if they exist in both types and the table
          // cost: item.cost,
          // markup_percentage: item.markup_percentage,
          // quantity: item.quantity,
          // document_id: item.document_id,
        }));

        const { error: budgetInsertError } = await supabase
          .from('project_budget_items')
          .insert(itemsToInsert);

        if (budgetInsertError) {
          console.error('Error saving project budget items:', budgetInsertError);
          // Don't throw error here, project was created, but warn the user
          toast({
            title: 'Warning: Budget Items Not Saved',
            description: `Project ${data.projectName} created, but budget items failed to save: ${budgetInsertError.message}`,
            variant: 'destructive',
            duration: 7000, // Longer duration for warning
          });
        } else {
          console.log('Budget items saved successfully.');
        }
      }
      // --- End budget item logic ---

      // If this project came from an estimate, update the estimate with the project ID
      if (data.estimateId) {
        const { error: updateError } = await supabase
          .from('estimates')
          .update({
            projectid: project[0]?.projectid,
            status: 'APPROVED',
          })
          .eq('estimateid', data.estimateId);

        if (updateError) {
          console.error('Warning: Failed to update estimate with project ID', updateError);
          // We don't throw here as the project was created successfully
        }
      }

      toast({
        title: 'Project created successfully',
        description: `${data.projectName} has been added to your projects.`,
      });

      // Call the success callback
      onSuccess();
    } catch (error: any) {
      console.error('Error creating project:', error);
      toast({
        title: 'Error creating project',
        description: error.message || 'There was an error creating the project. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return {
    isSubmitting,
    handleSubmit,
  };
};
